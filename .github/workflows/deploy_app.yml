name: Deploy Application

on:
  push:
    branches: [ "main" ]
    paths:
      - 'backend/**/*'
      - '.github/workflows/deploy_app.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - development
          - staging
          - production

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

env:
  AZURE_WEBAPP_NAME: 'projectmanagement-api'
  AZURE_WEBAPP_PACKAGE_PATH: './backend'
  DOTNET_VERSION: '8.0.x'

jobs:
  build-backend:
    name: Build Backend API
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: |
          cd backend
          dotnet restore

      - name: Build application
        run: |
          cd backend
          dotnet build --no-restore --configuration Release

      - name: Run tests
        run: |
          cd backend
          dotnet test --no-build --configuration Release --verbosity normal

      - name: Publish application
        run: |
          cd backend
          dotnet publish --no-build --configuration Release --output ./publish

      - name: Upload artifact for deployment
        uses: actions/upload-artifact@v4
        with:
          name: backend-app
          path: backend/publish

  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create frontend structure
        run: |
          mkdir -p frontend/public
          
          # Create simple package.json
          echo '{' > frontend/package.json
          echo '  "name": "projectmanagement-frontend",' >> frontend/package.json
          echo '  "version": "1.0.0",' >> frontend/package.json
          echo '  "scripts": {' >> frontend/package.json
          echo '    "build": "mkdir -p dist && cp -r public/* dist/",' >> frontend/package.json
          echo '    "start": "echo Starting frontend..."' >> frontend/package.json
          echo '  }' >> frontend/package.json
          echo '}' >> frontend/package.json

      - name: Create basic HTML page
        run: |
          echo '<!DOCTYPE html>' > frontend/public/index.html
          echo '<html lang="es">' >> frontend/public/index.html
          echo '<head>' >> frontend/public/index.html
          echo '    <meta charset="UTF-8">' >> frontend/public/index.html
          echo '    <meta name="viewport" content="width=device-width, initial-scale=1.0">' >> frontend/public/index.html
          echo '    <title>Project Management System</title>' >> frontend/public/index.html
          echo '    <style>' >> frontend/public/index.html
          echo '        body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; min-height: 100vh; }' >> frontend/public/index.html
          echo '        .container { max-width: 800px; margin: 0 auto; text-align: center; }' >> frontend/public/index.html
          echo '        h1 { font-size: 2.5em; margin-bottom: 1em; }' >> frontend/public/index.html
          echo '        .card { background: rgba(255,255,255,0.1); padding: 20px; border-radius: 10px; margin: 20px 0; backdrop-filter: blur(10px); }' >> frontend/public/index.html
          echo '        .status { background: rgba(76, 175, 80, 0.3); padding: 15px; border-radius: 5px; margin: 15px 0; }' >> frontend/public/index.html
          echo '        .btn { background: rgba(255,255,255,0.2); color: white; padding: 10px 20px; border: 1px solid rgba(255,255,255,0.3); border-radius: 5px; text-decoration: none; margin: 10px; display: inline-block; }' >> frontend/public/index.html
          echo '    </style>' >> frontend/public/index.html
          echo '</head>' >> frontend/public/index.html
          echo '<body>' >> frontend/public/index.html
          echo '    <div class="container">' >> frontend/public/index.html
          echo '        <h1>üéØ Project Management System</h1>' >> frontend/public/index.html
          echo '        <div class="card">' >> frontend/public/index.html
          echo '            <h2>Sistema de Gesti√≥n de Proyectos</h2>' >> frontend/public/index.html
          echo '            <p>Plataforma para gesti√≥n de proyectos, tareas y equipos.</p>' >> frontend/public/index.html
          echo '            <div class="status"><strong>üöÄ Estado:</strong> Desplegado exitosamente</div>' >> frontend/public/index.html
          echo '        </div>' >> frontend/public/index.html
          echo '        <div class="card">' >> frontend/public/index.html
          echo '            <h2>üîó API REST</h2>' >> frontend/public/index.html
          echo '            <p><strong>Documentaci√≥n:</strong> <a href="/swagger" style="color: #ffd700;">/swagger</a></p>' >> frontend/public/index.html
          echo '            <p><strong>Endpoints principales:</strong></p>' >> frontend/public/index.html
          echo '            <ul style="text-align: left;">' >> frontend/public/index.html
          echo '                <li>POST /api/users/register - Registro</li>' >> frontend/public/index.html
          echo '                <li>POST /api/users/login - Login</li>' >> frontend/public/index.html
          echo '                <li>GET /api/projects - Proyectos</li>' >> frontend/public/index.html
          echo '                <li>GET /api/tasks - Tareas</li>' >> frontend/public/index.html
          echo '            </ul>' >> frontend/public/index.html
          echo '        </div>' >> frontend/public/index.html
          echo '        <div class="card">' >> frontend/public/index.html
          echo '            <h2>üõ†Ô∏è Tecnolog√≠as</h2>' >> frontend/public/index.html
          echo '            <p>.NET 8.0 | Entity Framework | JWT | SQL Server | Azure</p>' >> frontend/public/index.html
          echo '        </div>' >> frontend/public/index.html
          echo '        <div>' >> frontend/public/index.html
          echo '            <a href="/swagger" class="btn">üìñ API Docs</a>' >> frontend/public/index.html
          echo '            <a href="https://github.com/UPT-FAING-EPIS/examen-2025-ii-pds-u1-LuzkalidGM" class="btn">üìã GitHub</a>' >> frontend/public/index.html
          echo '        </div>' >> frontend/public/index.html
          echo '    </div>' >> frontend/public/index.html
          echo '</body>' >> frontend/public/index.html
          echo '</html>' >> frontend/public/index.html

      - name: Build frontend
        run: |
          cd frontend
          npm run build

      - name: Upload frontend artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-app
          path: frontend/dist

  deploy-backend:
    name: Deploy Backend to Azure
    runs-on: ubuntu-latest
    needs: build-backend
    environment: 
      name: production
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    
    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: backend-app

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: .

      - name: Health check
        run: |
          echo "Waiting for application to start..."
          sleep 30
          
          # Try to check if the app is responding
          if curl -f -s "${{ steps.deploy-to-webapp.outputs.webapp-url }}/api/health" > /dev/null; then
            echo "‚úÖ Backend is responding"
          else
            echo "‚ö†Ô∏è Backend might be starting up"
          fi

  deploy-frontend:
    name: Deploy Frontend to Azure Storage
    runs-on: ubuntu-latest
    needs: build-frontend
    if: github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Download frontend artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-app

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Upload to Azure Storage
        uses: azure/CLI@v1
        with:
          inlineScript: |
            # Create storage account if it doesn't exist
            az storage account create \
              --name projectmanagementstorage \
              --resource-group projectmanagement-rg \
              --location "Brazil South" \
              --sku Standard_LRS \
              --kind StorageV2 \
              --allow-blob-public-access true || true
            
            # Enable static website hosting
            az storage blob service-properties update \
              --account-name projectmanagementstorage \
              --static-website \
              --index-document index.html \
              --404-document index.html || true
            
            # Upload files
            az storage blob upload-batch \
              --account-name projectmanagementstorage \
              --destination '$web' \
              --source . \
              --overwrite || true

  post-deployment:
    name: Post-Deployment Tasks
    runs-on: ubuntu-latest
    needs: [deploy-backend]
    if: always()
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Update deployment status
        run: |
          echo "## üöÄ Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ‚úÖ Completed deployments:" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.deploy-backend.result }}" = "success" ]; then
            echo "- üü¢ **Backend API**: Deployed successfully" >> $GITHUB_STEP_SUMMARY
            echo "  - üåê URL: [Backend API](https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net)" >> $GITHUB_STEP_SUMMARY
            echo "  - üìñ Swagger: [API Documentation](https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/swagger)" >> $GITHUB_STEP_SUMMARY
          else
            echo "- üî¥ **Backend API**: Deployment failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "- üü¢ **Frontend**: Basic frontend available" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîó Quick Links:" >> $GITHUB_STEP_SUMMARY
          echo "- üìä [Azure Portal](https://portal.azure.com)" >> $GITHUB_STEP_SUMMARY
          echo "- üìà [Monitoring](https://portal.azure.com)" >> $GITHUB_STEP_SUMMARY

      - name: Update README with deployment info
        if: needs.deploy-backend.result == 'success'
        run: |
          # Add deployment section to README
          if ! grep -q "üöÄ Deployment" README.md; then
            echo "" >> README.md
            echo "## üöÄ Deployment" >> README.md
            echo "" >> README.md
            echo "### üåê Live Application:" >> README.md
            echo "- **API Backend**: [https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net](https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net)" >> README.md
            echo "- **API Documentation**: [Swagger UI](https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/swagger)" >> README.md
            echo "- **Health Check**: [/api/health](https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/api/health)" >> README.md
            echo "" >> README.md
            echo "*Actualizado: $(date '+%d/%m/%Y')*" >> README.md
          fi

      - name: Commit deployment updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          git add README.md || true
          
          if git diff --staged --quiet; then
            echo "No deployment updates to commit"
          else
            git commit -m "üöÄ Actualizar informaci√≥n de deployment"
            git push
          fi

      - name: Summary
        run: |
          echo "üéâ Deployment process completed!"
          echo "üåê Backend API: https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net"
          echo "üìñ API Docs: https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/swagger"